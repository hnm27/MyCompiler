function bool belowSpeedLimit ( int speedLimit , int currentSpeed ) {
     if  ( currentSpeed >= speedLimit ) {
            return false;
            }
      return true;

}

int fine = 500;

if ( not belowSpeedLimit(100,101) ) { print(fine);} else {print(0);}
if ( not belowSpeedLimit(100,99) ) { print(fine);} else {print(0);}

import Sprockell
prog :: [Instruction]
prog = [Load  (ImmValue 500) regA,Push  regA,Pop  regA,Store  regA (DirAddr 1),Load  (ImmValue 100) regA,Push  regA,Pop  regA,Load  (ImmValue 5) regB,Store  regA (IndAddr regB),Load  (ImmValue 101) regA,Push  regA,Pop  regA,Load  (ImmValue 6) regB,Store  regA (IndAddr regB),Load  (ImmValue 3) regF,Load  (ImmValue 1) regA,Compute  Add regF regA regA,Load  (ImmValue 3) regB,Compute  Add regPC regB regB,Store  regB (IndAddr regA),Jump  (Abs (71)),Pop  regA,Load  (ImmValue 1) regB,Compute  Xor regA regB regA,Push  regA,Pop  regA,Branch  regA (Rel (2)),Jump  (Rel (6)),Load  (DirAddr 1) regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (5)),Load  (ImmValue 0) regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Load  (ImmValue 100) regA,Push  regA,Pop  regA,Load  (ImmValue 5) regB,Store  regA (IndAddr regB),Load  (ImmValue 99) regA,Push  regA,Pop  regA,Load  (ImmValue 6) regB,Store  regA (IndAddr regB),Load  (ImmValue 3) regF,Load  (ImmValue 1) regA,Compute  Add regF regA regA,Load  (ImmValue 3) regB,Compute  Add regPC regB regB,Store  regB (IndAddr regA),Jump  (Abs (71)),Pop  regA,Load  (ImmValue 1) regB,Compute  Xor regA regB regA,Push  regA,Pop  regA,Branch  regA (Rel (2)),Jump  (Rel (6)),Load  (DirAddr 1) regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,Jump  (Rel (5)),Load  (ImmValue 0) regA,Push  regA,Pop  regA,WriteInstr  regA numberIO,EndProg,Load  (ImmValue 3) regB,Compute  Add regF regB regB,Load  (IndAddr regB) regA,Push  regA,Load  (ImmValue 2) regB,Compute  Add regF regB regB,Load  (IndAddr regB) regA,Push  regA,Pop  regB,Pop  regA,Compute  GtE regA regB regA,Push  regA,Pop  regA,Branch  regA (Rel (2)),Jump  (Rel (8)),Load  (ImmValue 0) regA,Push  regA,Load  (ImmValue 1) regB,Compute  Add regB regF regB,Load  (IndAddr regB) regB,Jump  (Ind (regB)),Jump  (Rel (1)),Load  (ImmValue 1) regA,Push  regA,Load  (ImmValue 1) regB,Compute  Add regB regF regB,Load  (IndAddr regB) regB,Jump  (Ind (regB))]

main = run[prog]

[Sprockell 0 says 500, Sprockell 0 says 0]